name: Create PlanetScale Branch Password

description: Create PlanetScale Branch Password and export it to SSM Parameter Store

inputs:
  db_name:
    required: true
    description: The Database Name
    default: realworld-app
  org_name:
    required: true
    description: The Database Organization Name
    default: santunioni
  branch_name:
    required: true
    description: The Database Branch Name
  password_name:
    required: true
    description: The Database Password Name
    default: application

outputs:
  ID_PATH:
    value: ${{ steps.password.outputs.ID_PATH }}
    description: The ID Path
  URL_PATH:
    value: ${{ steps.password.outputs.URL_PATH }}
    description: The URL Path
  DATABASE_URL:
    value: ${{ steps.password.outputs.DATABASE_URL }}
    description: The Database URL

runs:
  using: 'composite'
  steps:
    - name: Create ${{ inputs.branch_name }} branch password if it does not exist
      shell: bash
      id: password
      working-directory: scripts/pscale
      env:
        DB_NAME: ${{ inputs.db_name }}
        ORG_NAME: ${{ inputs.org_name }}
        BRANCH_NAME: ${{ inputs.branch_name }}
        PASSWORD_NAME: ${{ inputs.password_name }}
      run: |
        . functions.sh    

        BASE_PATH="/pscale/$ORG_NAME/$DB_NAME/$BRANCH_NAME/$PASSWORD_NAME"
        ID_PATH="$BASE_PATH/id"
        URL_PATH="$BASE_PATH/url"

        ID=$(aws ssm get-parameters-by-path --path "$BASE_PATH" --output json | jq -r ".Parameters[] | select(.Name == \"$ID_PATH\") | .Value")
        FOUND_ID=$(pscale password list "$DB_NAME" "$BRANCH_NAME" --org "$ORG_NAME" --format json | jq -r ".[] | select(.id == \"$ID\") | .id")

        if [ ! -n "$FOUND_ID" ]; then
          raw_db_url=$(pscale password create "$DB_NAME" "$BRANCH_NAME" "$PASSWORD_NAME" --org "$ORG_NAME" --format json)
          ID=$(echo "$raw_db_url" |  jq -r ".id")
          URL=$(echo "$raw_db_url" |  jq -r ". | \"mysql://\" + .username +  \":\" + .plain_text +  \"@\" + .database_branch.access_host_url + \"/$DB_NAME\"")

          aws ssm put-parameter --name "$ID_PATH" --value "$ID" --type String --overwrite
          aws ssm put-parameter --name "$URL_PATH" --value "$URL" --type SecureString --overwrite
        else
          URL=$(aws ssm get-parameter --name "$URL_PATH" --with-decryption --output json | jq -r ".Parameter.Value")
        fi

        echo "ID_PATH=$ID_PATH" >> $GITHUB_OUTPUT
        echo "URL_PATH=$URL_PATH" >> $GITHUB_OUTPUT
        echo "DATABASE_URL=$URL" >> $GITHUB_OUTPUT
