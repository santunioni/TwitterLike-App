name: Deploy Sandbox

env:
  pscale_base_directory: .pscale
  DB_NAME: realworld-app
  GITHUB_USER: ${{ github.actor }}
  ORG_NAME: santunioni

on:
  workflow_call:

permissions:
  id-token: write
  contents: read

concurrency:
  group: sandbox
  cancel-in-progress: false

jobs:
  sandbox:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate on PlanetScale
        working-directory: .pscale/cli-helper-scripts
        shell: bash
        run: |
          . use-pscale-docker-image.sh
          pscale auth login

      - uses: ./.github/actions/credentials

      - id: environment
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          NAME=$(echo $BRANCH_NAME | tr -d '[:punct:]' | tr '[:upper:]' '[:lower:]')
          NAME=sandbox
          echo "name=$NAME" >> $GITHUB_OUTPUT

      - name: Create DB Branch
        uses: ./.github/actions/create_pscale_db_branch
        with:
          db_name: ${{ env.DB_NAME }}
          org_name: ${{ env.ORG_NAME }}
          branch_name: ${{ steps.environment.outputs.name }}

      - id: dburl
        name: Create DB Branch Password
        uses: ./.github/actions/create_pscale_db_branch_password
        with:
          db_name: ${{ env.DB_NAME }}
          org_name: ${{ env.ORG_NAME }}
          branch_name: ${{ steps.environment.outputs.name }}

      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.4
          terraform_wrapper: false

      - run: npm install
        shell: bash
        name: Dependencies

      - run: npm run migration:run
        shell: bash
        name: Migrations
        env:
          DATABASE_URL: ${{ steps.dburl.outputs.DATABASE_URL }}

      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: build

      - id: terraform
        name: Deploy ${{ steps.environment.outputs.name }}
        run: |
          make aws/terraform
          cd terraform
          echo "API_GATEWAY_URL=$(terraform output API_GATEWAY_URL | jq -r)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_DATABASE_URL: ${{ steps.dburl.outputs.DATABASE_URL }}
          TF_VAR_ENVIRONMENT: ${{ steps.environment.outputs.name }}

      - name: Wait ${{ steps.environment.outputs.name }}
        run: |
          ./scripts/wait_for_status.sh "$API_GATEWAY_URL/api/checks/readiness" 200
          ./scripts/wait_for_status.sh "$API_GATEWAY_URL/api/articles" 200
        env:
          API_GATEWAY_URL: ${{ steps.terraform.outputs.API_GATEWAY_URL }}

      - run: npm run test:acceptance
        shell: bash
        name: Acceptance TRPC Tests
        env:
          DRIVER: trpc
          API_URL: ${{ steps.terraform.outputs.API_GATEWAY_URL }}/api
          TRPC_URL: ${{ steps.terraform.outputs.API_GATEWAY_URL }}/trpc

      - run: npm run test:acceptance
        shell: bash
        name: Acceptance REST Tests
        env:
          DRIVER: rest
          API_URL: ${{ steps.terraform.outputs.API_GATEWAY_URL }}/api
          TRPC_URL: ${{ steps.terraform.outputs.API_GATEWAY_URL }}/trpc

      - name: Turn Down Computing
        working-directory: terraform
        run: |
          terraform destroy -auto-approve
        env:
          TF_VAR_DATABASE_URL: ${{ steps.dburl.outputs.DATABASE_URL }}
          TF_VAR_ENVIRONMENT: ${{ steps.environment.outputs.name }}

      - name: Turn Down Database
        working-directory: .pscale/cli-helper-scripts
        run: |
          . use-pscale-docker-image.sh
          pscale branch delete $DB_NAME $BRANCH_NAME --org $ORG_NAME --force
        env:
          BRANCH_NAME: ${{ steps.environment.outputs.name }}
